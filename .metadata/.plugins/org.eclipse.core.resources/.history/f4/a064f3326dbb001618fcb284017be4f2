package movingobjects;

import static java.lang.Math.abs;
import static java.lang.Math.sqrt;

import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import ddf.minim.AudioPlayer;
import ddf.minim.Minim;
import factory.TextFactory;
import main.GunRangePanel;
import processing.core.PApplet;
import sound.Sound;

/*SHOTGUN class provides all display and interaction for the in game weapon shotgun.
 *CREATED: 11/24/2016
 *AUTHOR: HENRY ZHAO*/
public class ShotGun extends Guns
{
	private SGPump pump;
	private boolean gunPumped;
	private boolean chambered;
	private Rectangle2D.Double chamber;
	private boolean emptyShell;
	private double jerkTimer;
	private Bullet tempEjection;


	/* WHAT IT DOES: Constructor for the Shotgun class
	 * PARAMETERS: 
	 * 	posx - x position of the gun
	 * 	posy - y position of the gun
	 * 	pump - animation of the shotgun pump via the SGPump object
	 * 	trigger - animation of the shotgun trigger via the Trigger object
	 * RETURN: NONE*/
	public ShotGun(double posx, double posy, SGPump pump, Trigger trigger) {
		super(posx, posy);
		// TODO Auto-generated constructor stub
		try {
			avatar = ImageIO.read(getClass().getResourceAsStream("/assets/SGBase.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			overlay = ImageIO.read(getClass().getResourceAsStream("/assets/SGOverlay.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			muzzleFlash = ImageIO.read(getClass().getResourceAsStream("/assets/SGFlash.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		this.pump = pump;
		width = avatar.getWidth();
		height = avatar.getHeight();
		gunLoaded = false;
		gunPumped = false;
		chambered = false;
		chamber = new Rectangle2D.Double();
		chamber.setFrame((int)(pump.getX()-pump.getW()/2+400-94/2+5), (int)(pump.getY()-pump.getH()/2-20), 94, 29);
		this.trigger = trigger;
		emptyShell = false;
		jerkTimer = 0;
		tempEjection = new Bullet(chamber.getCenterX(), chamber.getCenterY(), 2);
		tempEjection.setAngle(-90);
		
		fire = new Sound("SGFire");
	}
	
//	public void debug()
//	{
//		System.out.println(" ");
//		System.out.println("loaded " + gunLoaded);
//		System.out.println("pumped " + gunPumped);
//		System.out.println("chambered " + chambered);
//		System.out.println("spent shell " + emptyShell);
//	}

	/* WHAT IT DOES: Draws the actual shot gun model and related objects
	 * PARAMETERS:
	 * 	g2 - brush of Graphics2D
	 * RETURN: NONE*/
	@Override
	public void draw(Graphics2D g2) {
		// TODO Auto-generated method stub
		old = g2.getTransform();
		oldC = g2.getComposite();
		if (System.currentTimeMillis() - jerkTimer >= 250/2 && jerkTimer != 0)
		{
			jerkTimer = 0;
			posx -= 50;
			angle = 0;
			flash = false;
		}
		g2.translate(posx, posy);
		g2.rotate(Math.toRadians(angle));
		
		opacity = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, initialOpacity);
		
		g2.drawImage(avatar, -avatar.getWidth()/2, -avatar.getHeight()/2, avatar.getWidth(), avatar.getHeight(), null);
		AffineTransform adjustment = g2.getTransform();
		g2.translate(-posx, -posy);
		if (bullet != null)
		{
			bullet.setAngle(-90);
			bullet.setPos(chamber.getCenterX(), chamber.getCenterY());
			bullet.draw(g2);
		}
		if (emptyShell)
			tempEjection.draw(g2);
		pump.draw(g2);
		trigger.draw(g2);
		g2.setTransform(adjustment);
//		g2.fill(chamber);
//		g2.translate(posx, posy);
		if (flash)
		{
			g2.drawImage(muzzleFlash, -muzzleFlash.getWidth()/2-870, -muzzleFlash.getHeight()/2-70, 
					muzzleFlash.getWidth(), muzzleFlash.getHeight(), null);
		}
		g2.drawImage(overlay, -overlay.getWidth()/2, -overlay.getHeight()/2, overlay.getWidth(), overlay.getHeight(), null);
		appear();
		g2.setComposite(oldC);
		g2.setTransform(old);
	}
	

	/* WHAT IT DOES: Determines if the bullet is the correct position to be inserted into the shotgun chamber
	 * PARAMETERS:
	 * 	bullet - the bullet to be inspected
	 * RETURN: Boolean - whether or not the bullet is sufficiently close to the gun chamber*/
	public boolean chamberDetection(Bullet bullet)
	{
		if (chamber.intersects(bullet.getHitbox()))
		{
			return true;
		}
		return false;
	}
	

	/* WHAT IT DOES: Acts as a helper class to Bullet class to provide bullet rotation based on proximity
	 * 	to gun chamber
	 * PARAMETERS: The target object to compare with to this model's chamber 
	 * RETURN: double - the distance in a straight line from the target position to this model's chamber*/
	public double distToChamber(MovingObjects target)
	{
		return sqrt((abs(chamber.getX()-target.posx)*abs(chamber.getX()-target.posx))+
				(abs(chamber.getY()-target.posy)*abs(chamber.getY()-target.posy)));
	}
	

	/* WHAT IT DOES: Handles the logistics of determining when this shot gun can fire
	 * PARAMETERS: NONE
	 * RETURN: Boolean - Whether this gun has successfully fired or not*/
	public boolean fire()
	{
		if (gunLoaded == false || gunPumped)
		{
			System.out.println("no bullet");
			GunRangePanel.addText("No Shell Loaded");
			click.play();
//			GunRangePanel.texts.add(new TextFactory("Test", 40));

			return false;
		}
		else
		{
			System.out.println("fired");
			gunLoaded = false;
			bullet = null;
			chambered = false;
			emptyShell = true;
			jerkTimer = System.currentTimeMillis();
			flash = true;
			angle = 10;
			posx += 50;
			
			fire.play();
			if (GunRangePanel.getTut() == 25)
			{
				GunRangePanel.setTut(26);
			}
			return true;
		}
	}
	
	/* WHAT IT DOES: Handles the ejection of empty shells after the gun has been fired
	 * PARAMETERS: NONE
	 * RETURN: Boolean - whether or not the gun met the requirements to eject an empty shell*/
	public boolean eject()
	{
		if (gunPumped && emptyShell)
		{	
			emptyShell = false;
			GunRangePanel.addText("Shell Ejected");

			if (GunRangePanel.getTut() == 26)
			{
				GunRangePanel.setTut(27);
			}
			return true;
		}
		return false;
	}
	
	/* WHAT IT DOES: Handles the logistics of manual reloading via pumping the gun's pump to reload a shell
	 * PARAMETERS: NONE
	 * RETURN: NONE*/
	public void manualReload()
	{
		if(gunLoaded == false)
		{
			System.out.println("manual reloaded");
			gunLoaded = true;
			GunRangePanel.addText("Gun Reloaded");
			if (GunRangePanel.getTut() == 24)
			{
				GunRangePanel.setTut(25);
			}
		}
		
	}


	/* WHAT IT DOES: Getter method to retrieve the status of whether or not the gun is pumped
	 * PARAMETERS: NONE
	 * RETURN: Boolean - if the gun is currently pumped*/
	public boolean isGunPumped() {
		return gunPumped;
	}


	/* WHAT IT DOES: Setter method for gunPumped.
	 * PARAMETERS: gunPumped - the desired status to set for the gun's current pump
	 * RETURN: NONE*/
	public void setGunPumped(boolean gunPumped) {
		this.gunPumped = gunPumped;

	}


	/* WHAT IT DOES: Getter method for the variable chambered
	 * PARAMETERS:
	 * RETURN:*/
	public boolean isChambered() {
		return chambered;
	}
	
	public void wasteBullet()
	{
		chambered = false;
		bullet = null;
		gunLoaded = false;
		GunRangePanel.addText("Shell Ejected");
	}

	/**
	 * @param chambered the chambered to set
	 */
	public void setChambered(boolean chambered, Bullet bullet) {
		bullet = bullet;
		this.chambered = chambered;
		GunRangePanel.addText("Gun Chambered");
		if (GunRangePanel.getTut() == 23)
		{
			GunRangePanel.setTut(24);
		}
	}
	
	public Rectangle2D.Double getChamber()
	{
		return chamber;
	}

}
