package main;

import java.awt.event.*;
import java.awt.image.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.*;

import factory.BulletConcreteFactory;
import movingobjects.Bullet;
import movingobjects.BulletCasing;
import movingobjects.GunM4;
import movingobjects.GunM4Pin;
import movingobjects.GunM4Trigger;
import movingobjects.Magazine;
import movingobjects.MovingObjects;
import movingobjects.Pointer;

import java.awt.*;

public class GunRangePanel extends JPanel implements ActionListener, MouseListener, MouseMotionListener
{
	public static final int WIN_H = 972;
	public static final int WIN_W = 1728;
	private JFrame frame;
	private BufferedImage bg;
	private Timer timer;
	private Pointer pointer;
	private MovingObjects held;
	private Magazine mag;
	private ArrayList <Bullet> ammo = new ArrayList<Bullet>();
	
	private JButton spawnAmmo;
	
	private int spawnAmmoTimer;
	
	private GunM4 rifle;
	private GunM4Pin pin;
	private GunM4Trigger trigger;
	public ArrayList<BulletCasing> casings = new ArrayList<BulletCasing>();
	private JButton spawnM4;
	
//	new
	BulletConcreteFactory bullets;
	
	public GunRangePanel(JFrame frame)
	{
		super();
		this.frame = frame;
		this.setPreferredSize(new Dimension(WIN_W, WIN_H));
		setLayout(new FlowLayout());
//		try {
////			bg = ImageIO.read(new File("background.jpg"));
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		addMouseListener(this);
		addMouseMotionListener(this);
		timer = new Timer(60, this);
		timer.start();
		
		pointer = new Pointer(0,0);
//		generateAmmo();
		
//		BUTTONS
		spawnAmmo = new JButton("Spawn Ammo");
		add(spawnAmmo);
		spawnAmmo.addActionListener(this);
		
		spawnAmmoTimer = 50;
		
		bullets = new BulletConcreteFactory();
		spawnM4 = new JButton("Spawn M4");
		add(spawnM4);
		spawnM4.addActionListener(this);
	}
	
	private void generateM4()
	{
		System.out.println("here");
		pin = new GunM4Pin(994,433);
		trigger = new GunM4Trigger(1003.0, 490.0);
		rifle = new GunM4(WIN_W/2, WIN_H/2, pin, trigger);
		mag = new Magazine(WIN_W/2-300, WIN_H/2);
	}
	
	private void generateAmmo()
	{
		int spawnTime = 60;
		for (int i = 0; i < 3; i++)
		{
			ammo.add((Bullet) bullets.createBullet("bullet", i));
		}
	}
	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
//		g.drawImage(bg, 0,0,WIN_W, WIN_H, null);
		for (int i = 0; i < ammo.size(); i++)
		{
			
			ammo.get(i).draw(g2);
			if (mag != null)
			{
				if (ammo.get(i).handleCollision(mag) && ammo.get(i) != held)
				{
					mag.reload();
					ammo.remove(i);
				}
			}
		}
		if (mag != null)
		{
			mag.draw(g2);
		}
		
		if (rifle != null)
		{
			rifle.draw(g2);			
		}
		for (int i = 0; i < casings.size(); i++)
		{
			if (casings.get(i).delete == true)
			{
				casings.remove(i);
			}
			else
			{
				casings.get(i).draw(g2);
			}
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if (e.getActionCommand() == "Spawn Ammo")
		{
			generateAmmo();
		}
		if (e.getActionCommand() == "Spawn M4")
		{
			generateM4();
		}
//		for (int i = 0; i < casings.size(); i++)
//		{
//			casings.get(i).update();
//		}
		repaint();
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
//		LOADING/DRAGGING THE BULLET
		for (int i = 0; i < ammo.size(); i++)
		{
			if(ammo.get(i).handleCollision(pointer))
			{
				held = ammo.get(i);
			}
		}
		if (mag != null)
		{
			if(mag.handleCollision(pointer) && mag.isLoaded() == false)
			{
				held = mag;
			}
			if(mag.handleCollision(pointer) && mag.isLoaded() == true)
			{
				
			}
		}
		if (pin != null)
		{
			if(pin.handleCollision(pointer))
			{
				pointer.setOldX(e.getX());
				pointer.setOldY(e.getY());
				pin.setOldX(pin.getX());
				pin.setOldY(pin.getY());
				held = pin;
			}
		}
		if (trigger != null)
		{
			if(trigger.handleCollision(pointer))
			{
				trigger.fire();
				if(rifle.fire())
				{
					casings.add((BulletCasing) bullets.createBullet("casing", 0));
				}
			}
		}
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		if (held instanceof Bullet)
		{
			if (held.handleCollision(mag) == false)
			{
				held.setAngle(0);				
			}		
		}
		if (held instanceof GunM4Pin)
		{
//			snap back effect
			GunM4Pin heldTrigger = (GunM4Pin) held;
			heldTrigger.setPos(heldTrigger.getOldX(), heldTrigger.getOldY());
		}
		held = null;
	}

	@Override
	public void mouseDragged(MouseEvent arg0) {
		// TODO Auto-generated method stub
		pointer.setPos(arg0.getX(), arg0.getY());
		if (held != null)
		{
			if (held instanceof GunM4Pin)
			{
				GunM4Pin heldTrigger = (GunM4Pin) held;
				if (heldTrigger.getX() >= heldTrigger.getOldX() && heldTrigger.getX() < heldTrigger.getOldX() + 100)
				heldTrigger.setPos(
						heldTrigger.getOldX()+(pointer.getX()-pointer.getOldX()), heldTrigger.getY());
				if (heldTrigger.getX() > heldTrigger.getOldX() + 100)
					heldTrigger.setPos(heldTrigger.getOldX()+100, heldTrigger.getOldY());
				if (rifle.isLoaded() == true && heldTrigger.getX() >= heldTrigger.getOldX() + 90)
				{
					rifle.manualReload();
				}
			}
			else
			{
				held.setPos(pointer.getX(), pointer.getY());
				if (held instanceof Bullet)
				{
					((Bullet) held).handleProximity(mag);
				}
				else if(held instanceof Magazine)
				{
					if (rifle.reloadDetection(mag))
					{
						mag.setLoaded(true);
						mag.setPos(904.0,555.0);
						held = null;
					}
				}
			}
			repaint();
		}
	}

	@Override
	public void mouseMoved(MouseEvent arg0) {
		// TODO Auto-generated method stub	
		pointer.setPos(arg0.getX(), arg0.getY());
	}
}
