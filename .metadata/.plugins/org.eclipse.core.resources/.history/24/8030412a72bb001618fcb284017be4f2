package movingobjects;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import factory.TextFactory;
import main.GunRangePanel;
import sound.Sound;

/*GUNM4 provides animation, logistics, and cursor interaction for all Rifle GunM4 related activities
 *CREATED: 11/17/2016
 *AUTHOR: HENRY ZHAO*/
public class GunM4 extends Guns
{
	private GunM4Pin pin; //The special object just for this class to handle manual reloading
	private Rectangle2D.Double magDetection; //Provides the hitbox for the opening of the gun's magazine
	private Magazine currMag; //The current magazine that's inserted into the gun
	private Sound clipOut; //The sound clip containing the sound of the magazine ejecting
//	private TextFactory warnings;
	
	/* WHAT IT DOES: Constructor for the GunM4 class 
	 * PARAMETERS: 
	 * 	posx - x position
	 * 	posy - y position
	 * 	pin - the special pin object to handle manual reloading
	 * 	trigger - the trigger object to handle mouse interactions when firing the gun
	 * RETURN: NONE*/
	public GunM4(double posx, double posy, GunM4Pin pin, Trigger trigger) {
		super(posx, posy);
		// TODO Auto-generated constructor stub
		try {
			avatar = ImageIO.read(getClass().getResourceAsStream("/assets/GunBase.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			overlay = ImageIO.read(getClass().getResourceAsStream("/assets/GunOverlay.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			muzzleFlash = ImageIO.read(getClass().getResourceAsStream("/assets/muzzleFlash.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		width = 2856*0.4;
		height = 746*0.4;
		this.pin = pin;
		this.trigger = trigger;
		magDetection = new Rectangle2D.Double();
		magDetection.setFrame((posx+width*0.04-(width*0.08)/2), 
				(posy+height*0.05-(height*0.2)/2), 
				(width*0.08), (height*0.2));
		gunLoaded = false;
		currMag = null;
		bullet = new Bullet(994-80, 433-5, 1);
		bullet.setAngle(-90);
		flash = false;
		
		fire = new Sound("ARFire");
		clipOut = new Sound("clipOut");
		
	}

	/* WHAT IT DOES: Draws the Rifle M4 with all of its necessary components 
	 * PARAMETERS: 
	 * 	g2 - Graphics2D brush
	 * RETURN: NONE*/
	@Override
	public void draw(Graphics2D g2) {
		// TODO Auto-generated method stub
		old = g2.getTransform();
		oldC = g2.getComposite();
//		g2.translate(250,0);
		if (System.currentTimeMillis() - jerkTimer >= 250/3 && jerkTimer != 0)
		{
			if (currMag != null)
			{
				currMag.setPos(currMag.getX()-50, currMag.getY());
			}
			posx-=50;
			jerkTimer = 0;
			flash = false;
		}
		if (currMag != null)
			currMag.draw(g2);
		opacity = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, initialOpacity);
		g2.setComposite(opacity);
		

		g2.drawImage(avatar, (int)(posx-width/2), (int) (posy-height/2), (int) width, (int) height, null);
		if (currMag != null && currMag.isEmpty() == false && gunLoaded == true)
		{
			bullet.draw(g2);			
		}
		pin.draw(g2);
		trigger.draw(g2);
		if (flash)
		{
			g2.drawImage(muzzleFlash, (int) posx-640-450, (int) posy-480/2-55, 640, 480, null);
		}
		g2.drawImage(overlay, (int)(posx-width/2), (int) (posy-height/2), (int) width, (int) height, null);
		
//		if (currMag != null && currMag.isEmpty())
//		{
//			eject();
//		}
		appear();
//		g2.setColor(Color.red);
//		g2.fill(magDetection);
		
		g2.setComposite(oldC);
		g2.setTransform(old);
	}
	
	/* WHAT IT DOES: Provides a public getter method to determine if the gun is currently loaded with a magazine 
	 * PARAMETERS: NONE
	 * RETURN: Boolean - if the gun is loaded with magazine or not*/
	public boolean isLoaded()
	{
		if (currMag == null)
		{
			return false;
		}
		return true;
	}
	
	/* WHAT IT DOES: Detects if the magazine is sufficiently close to be loaded into the gun 
	 * PARAMETERS: 
	 * 	mag - The target magazine used to calculate the proximity with the gun
	 * RETURN: Boolean - whether the magazine can be loaded into the gun*/
	public boolean reloadDetection(Magazine mag)
	{
		if (magDetection.intersects(mag.getOpenSlot()))
		{
			currMag = mag;			
			GunRangePanel.addText("Magazine Loaded");
			if (GunRangePanel.getTut() == 13)
			{
				GunRangePanel.setTut(14);
			}
			return true;
		}
		return false;
	}
	
	private boolean reload()
	{
		System.out.println("reloading");

		if (currMag != null && currMag.isEmpty() == false)
		{

			System.out.println("reloaded");
			currMag.useBullet();
			
			gunLoaded = true;
			
			return true;
		}

		System.out.println("failed to reload");
		return false;
	}
	
	public boolean fire()
	{
		if (gunLoaded == false)
		{
			GunRangePanel.addText("No Bullet Loaded");
			if (GunRangePanel.getTut() == 15)
			{
				GunRangePanel.setTut(16);
			}
			click.play();
			return false;
		}
		else
		{
			if (currMag != null)
			{
				currMag.setPos(currMag.getX()+50, currMag.getY());
			}
			posx += 50;
			jerkTimer = System.currentTimeMillis();
			System.out.println("fired");
			gunLoaded = false;
			reload();
			flash = true;
			fire.play();
			return true;
		}
	}
	public void manualReload()
	{
//		if (gunLoaded == true)
//			wasteBullet();
		if (currMag != null)
		{
			if(currMag.isEmpty() == false)
			{
				if (gunLoaded == false)
				{
					GunRangePanel.addText("Gun Loaded");
					if (GunRangePanel.getTut() == 14)
					{
						GunRangePanel.setTut(15);
					}
					currMag.useBullet();
					gunLoaded = true;
				}
			}
			else
			{
				GunRangePanel.addText("Magazine Empty");
				if (GunRangePanel.getTut() == 15)
				{
					GunRangePanel.setTut(16);
				}
			}
		}
		else
		{
			GunRangePanel.addText("No Magazine Inserted!");
		}
	}
	
	public void wasteBullet()
	{
		gunLoaded = false;
		
	}
	
	public boolean eject()
	{
		GunRangePanel.addText("Ejecting Magazine");
		currMag.setEject();
		currMag = null;
		clipOut.play();
		if (GunRangePanel.getTut() == 16)
		{
			GunRangePanel.setTut(17);
		}
		return true;
	}
}
	