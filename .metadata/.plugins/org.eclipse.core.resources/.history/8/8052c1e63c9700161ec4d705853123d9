import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.awt.*;
import java.awt.geom.*;

import javax.swing.JPanel;
import javax.swing.Timer;

public class FishPanel extends JPanel implements MouseListener, ActionListener, MouseMotionListener 
{
	
	public final static int WIN_H = 972;
	public final static int WIN_W = 1728;
	
	public Fish[] fish = new Fish[10];
	private Timer timer;
	
	private ArrayList<Ellipse2D.Double> rocksList;
	
	private	Rectangle2D.Double pond = new Rectangle2D.Double();
	
	private Ellipse2D.Double rock1 = new Ellipse2D.Double();
	private Ellipse2D.Double rock2 = new Ellipse2D.Double();
	private Ellipse2D.Double rock3 = new Ellipse2D.Double();
	private Ellipse2D.Double rock4 = new Ellipse2D.Double();
	private Ellipse2D.Double rock5 = new Ellipse2D.Double();
	

	private CubicCurve2D.Double seaweed1 = new CubicCurve2D.Double();
	private CubicCurve2D.Double seaweed2 = new CubicCurve2D.Double();
	private CubicCurve2D.Double seaweed3 = new CubicCurve2D.Double();
	
	private int mouseX, mouseY, decrement;
	private boolean showRod, mouseDown;
	private Point hookPoint;
	private boolean left = true;
	private double struggleTimer = 0;
	
	public FishPanel()
	{
		super();
		timer = new Timer(60,this);
		timer.start();
		
		this.setPreferredSize(new Dimension(WIN_W, WIN_H));
//		fish[0] = new Fish(WIN_W/2, WIN_H/2, 1);
//		fish[1] = new Fish(WIN_W/2-300, WIN_H/2, 0.5);
		for ( int i = 0; i < fish.length; i++)
		{
			fish[i] = new Fish(
					Util.random(150,WIN_W-150), 
					Util.random(WIN_H/2+100, WIN_H-100), 
					Util.random(0.3,0.75), 
					new Color((int) Util.random(1,255),(int) Util.random(0,255),(int) Util.random(0,255)),
					new Color((int) Util.random(0,255),(int) Util.random(0,255),(int) Util.random(0,255))
					);
		}
		this.setBackground(Color.white);
		rocksList = new ArrayList<Ellipse2D.Double>();
		hookPoint = new Point(0,0);
		
		addMouseListener(this);
		addMouseMotionListener(this);
		caught = null;
		rodLength = WIN_H/2;
		mouseDown = false;
		decrement = 0;
	}
	
	public Point hookPos()
	{
		return hookPoint;
	}
	
	private void fishingRod(Graphics2D g2)
	{
		g2.setColor(Color.black);
		g2.setStroke(new BasicStroke(5));
		g2.fillRect(mouseX-5/2, mouseY, 5, rodLength);
		QuadCurve2D hook = new QuadCurve2D.Double();

		hookPoint.x = mouseX-25;
		hookPoint.y = mouseY+WIN_H/2+50-decrement;
		hook.setCurve(mouseX, hookPoint.y-50, mouseX-25, hookPoint.y, mouseX-50, hookPoint.y-50);
//		g2.fillOval(mouseX-5, mouseY+WIN_H/2-10, 20, 20);
		g2.draw(hook);

		if (showRod && caught != null)
		{
			if (rodLength > 0 && mouseDown)
			{
//				System.out.println(rodLength);
//				System.out.println(hookPoint.y);
				
				rodLength-=5;
				decrement+=5;
			}
		}
		
		if (rodLength <= 0)
		{
			caught = null;
			rodLength = WIN_H/2;
			decrement = 0;
		}
	}
	
	private int findFish()
	{
		for (int i = 0; i < fish.length; i++)
		{
			if (fish[i] != null)
			{
				Fish target = fish[i];
				if (Math.abs(hookPoint.x - target.posx) <= 50/2 + target.myWidth/2+target.getOffset() && Math.abs(hookPoint.y - target.posy) <= 10/2 + target.myHeight/2)
				{
					return i;
				}
				
			}
		}
		return -1;
	}
	
	public void paintComponent(Graphics g)
	{
		Graphics2D g2 = (Graphics2D) g;
		AffineTransform old = g2.getTransform();
		super.paintComponent(g);
		drawPond(g2);
		drawRocks();
		for (int i = 0; i < fish.length; i++)
		{
			if (fish[i] != null)
			{
				fish[i].drawFish(g);				
			}			
		}
		if (caught != null)
		{
			caught.drawFish(g);
			
			if (struggleTimer == 0)
			{
				caught.setStruggle(Math.toRadians(-15));
				struggleTimer = System.currentTimeMillis();
			}
			else if (System.currentTimeMillis() - struggleTimer >= 100)
			{
				if (left)
				{
					caught.setStruggle(Math.toRadians(30));
					struggleTimer = System.currentTimeMillis();	
					left = false;
				}
				else
				{
					caught.setStruggle(Math.toRadians(-30));
					struggleTimer = System.currentTimeMillis();
					left = true;
				}
			}
		}
		g2.setTransform(old);
		g2.setColor(Color.gray);
		for (int i = 0; i < rocksList.size(); i++)
		{
			g2.fill(rocksList.get(i));
		}		
		drawSeaweeds(g2);
		if (showRod)
		{
			fishingRod(g2);
		}
		
	}
	
	private void drawSeaweeds(Graphics2D g2)
	{
		g2.setColor(Color.green);
		Point test = new Point(WIN_W/2+500, WIN_H);
		seaweed1.setCurve(test.x, test.y-20, test.x-100, test.y-100-20, test.x+100, test.y-200-20, test.x, test.y-300-20);
		seaweed2.setCurve(test.x-50, test.y-20, test.x-100-50, test.y-50-20, test.x+100-50, test.y-150-20, test.x-50, test.y-250-20);
		seaweed3.setCurve(test.x+50, test.y-20, test.x-100+50, test.y-100+50-20, test.x+100+50, test.y-200+100-20, test.x+50, test.y-300+150-20);
		g2.setStroke(new BasicStroke(20, BasicStroke.CAP_ROUND, BasicStroke.JOIN_MITER));
		g2.draw(seaweed1);
		g2.draw(seaweed2);
		g2.draw(seaweed3);
	}
	
	private void drawPond(Graphics2D g2)
	{
		
		pond.setFrame(10, WIN_H/2, WIN_W-20, WIN_H/2-10);
		Color pondColor = Color.decode("#1FBED6");
		g2.setColor(pondColor);
		g2.fill(pond);		
	}
	
	private void drawRocks()
	{
//		System.out.println("Here");
		rock1.setFrame(132, 944-100, 50, 25);
		rock2.setFrame(385, 947-100, 50, 25);
		rock3.setFrame(694, 893-100, 50, 25);
		rock4.setFrame(1035, 963-100, 50, 25);
		rock5.setFrame(1620, 964-100, 50, 25);
		rocksList.add(rock1);		
		rocksList.add(rock2);
		rocksList.add(rock3);
		rocksList.add(rock4);
		rocksList.add(rock5);
	}
	
	private void fishUpdate()
	{
		for (int i = 0; i < fish.length; i++)
		{
			if(fish[i] != null)
			{
				for (int j = i+1; j < fish.length; j++)
				{
					if (fish[j] != null && fish[j] != fish[i])
					{
						if (fish[i].handleCollision(fish[j]))
						{
							fish[i].changeDirection();
							fish[j].changeDirection();
							
							fish[i].setLocation(fish[i].getDirection()*3+fish[i].getLocation()[0] 
									,fish[i].getLocation()[1]);
							fish[j].setLocation(fish[j].getDirection()*3+fish[j].getLocation()[0] 
									,fish[j].getLocation()[1]);
						}
					}
				}
				if (showRod)
				{
					fish[i].scatterFish(hookPoint.x, hookPoint.y);
				}
				fish[i].moveFish();
			}
		}
		if (caught != null)
		{
			caught.setLocation(hookPoint.x, hookPoint.y+caught.myWidth/2-caught.getOffset()-10);
		}
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		fishUpdate();
		repaint();
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		showRod = false;
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
//		System.out.println(e.getX());
//		System.out.println(e.getY());
//		System.out.println("\n");
		if (showRod && caught == null)
		{
			int remove = findFish();
			if (remove >= 0 )
			{
				caught = new Fish(fish[remove]);
				fish[remove] = null;
				
				caught.setRotate(Math.toRadians(caught.getDirection()*-90));
				
			}
		}
		mouseDown = true;
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		mouseDown = false;
	}

	@Override
	public void mouseDragged(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseMoved(MouseEvent arg0) {
		// TODO Auto-generated method stub
		mouseX = arg0.getX();
		mouseY = arg0.getY();
		
		if (mouseX >= 0 && mouseX <= WIN_W && mouseY >= 0 && mouseY <= WIN_H/2)
		{
			showRod = true;
		}
		else
		{
			showRod = false;
		}
	}

}
